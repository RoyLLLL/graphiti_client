# utils/graphiti_client.py
import os
import requests
from typing import Dict, Any

class UserProfile:
    """
    Simple data structure to hold user profile fields.
    """
    def __init__(self, name: str = "", language: str = "", location: str = "", timezone: str = ""):
        self.name = name
        self.language = language
        self.location = location
        self.timezone = timezone

    def __repr__(self):
        return f"UserProfile(name={self.name}, language={self.language}, location={self.location}, timezone={self.timezone})"

class GraphitiClient:
    def __init__(self, base_url: str = None):
        # Support environment variable GRAPHITI_API_URL, default to http://localhost:8000
        self.base_url = base_url or os.getenv("GRAPHITI_API_URL", "http://127.0.0.1:8000")
        if not self.base_url:
            raise ValueError("Graphiti API base URL is not configured.")
        # Ensure no trailing slash
        self.base_url = self.base_url.rstrip("/")
    
    def get_user_profile(self, user_id: str) -> UserProfile:
        """
        Retrieve user profile from Graphiti by user_id.
        This may involve a GET to /entity-node or a POST to /search endpoint.
        """
        # Example using a hypothetical /entity-node endpoint
        try:
            resp = requests.get(f"{self.base_url}/entity-node", params={"uuid": user_id})
            resp.raise_for_status()
            data = resp.json()
        except Exception:
            # Fallback: try search by group_id (if Graphiti uses group-based search)
            payload = {"query": "", "group_ids": [f"user_{user_id}"]}
            resp = requests.post(f"{self.base_url}/search", json=payload)
            resp.raise_for_status()
            data = resp.json()

        # Parse user profile fields from returned data
        profile = UserProfile()
        # Suppose data contains fields directly or edges list
        # Adjust parsing as per actual API schema
        profile.name = data.get("name") or data.get("username") or ""
        profile.language = data.get("language") or ""
        profile.location = data.get("location") or ""
        profile.timezone = data.get("timezone") or ""
        # If Graphiti returns edges, parse edges:
        for edge in data.get("edges", []):
            fact = edge.get("fact", "")
            if "language" in fact.lower():
                profile.language = fact.split(":")[-1].strip()
            if "location" in fact.lower():
                profile.location = fact.split(":")[-1].strip()
            if "timezone" in fact.lower():
                profile.timezone = fact.split(":")[-1].strip()
        return profile

    def upload_conversation(self, conversation_text: str, user_id: str):
        """
        Upload the given conversation (e.g. user message or full exchange) to Graphiti.
        Typically calls /extract then /add_episode.
        """
        group_id = f"user_{user_id}"
        headers = {"Content-Type": "application/json"}
        # 1. Call /extract to extract facts (if available)
        try:
            extract_payload = {"text": conversation_text, "group_id": group_id}
            resp = requests.post(f"{self.base_url}/extract", json=extract_payload, headers=headers)
            resp.raise_for_status()
        except Exception as e:
            # If extract fails or not available, proceed
            pass

        # 2. Add the conversation as a new episode
        episode_payload = {
            "content": conversation_text,
            "source_description": "Chat conversation",
            "group_id": group_id
        }
        resp = requests.post(f"{self.base_url}/add_episode", json=episode_payload, headers=headers)
        resp.raise_for_status()
